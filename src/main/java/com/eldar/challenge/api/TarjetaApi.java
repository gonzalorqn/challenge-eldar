/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eldar.challenge.api;

import com.eldar.challenge.api.configuration.ApiUtil;
import com.eldar.challenge.dto.TarjetaDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "tarjeta", description = "the tarjeta API")
public interface TarjetaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "crearTarjeta", notes = "Crea una nueva tarjeta.", response = TarjetaDTO.class, tags={ "Tarjeta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TarjetaDTO.class) })
    @RequestMapping(value = "/tarjeta",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    default ResponseEntity<TarjetaDTO> crearTarjeta(@ApiParam(value = "Metadata de la tarjeta." ,required=true )  @Valid @RequestBody TarjetaDTO tarjetaDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"marca\" : \"marca\",  \"numero\" : \"numero\",  \"fechaVencimiento\" : \"fechaVencimiento\",  \"id\" : 0,  \"cardholder\" : \"cardholder\"}");
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    ApiUtil.setExampleResponse(request, "application/xml", "<null>  <id>123456789</id>  <marca>aeiou</marca>  <numero>aeiou</numero>  <cardholder>aeiou</cardholder>  <fechaVencimiento>aeiou</fechaVencimiento></null>");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getIsTarjetaValida", notes = "Verifica si una tarjeta es v√°lida para operar en el sistema.", response = String.class, tags={ "Tarjeta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/tarjeta/{idTarjeta}/isValida",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getIsTarjetaValida(@ApiParam(value = "Id de la tarjeta.",required=true) @PathVariable("idTarjeta") String idTarjeta) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getTarjeta", notes = "Obtiene todos los datos de una tarjeta.", response = TarjetaDTO.class, tags={ "Tarjeta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TarjetaDTO.class) })
    @RequestMapping(value = "/tarjeta/{idTarjeta}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TarjetaDTO> getTarjeta(@ApiParam(value = "Id de la tarjeta.",required=true) @PathVariable("idTarjeta") String idTarjeta) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"marca\" : \"marca\",  \"numero\" : \"numero\",  \"fechaVencimiento\" : \"fechaVencimiento\",  \"id\" : 0,  \"cardholder\" : \"cardholder\"}");
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    ApiUtil.setExampleResponse(request, "application/xml", "<TarjetaDTO>  <id>123456789</id>  <marca>aeiou</marca>  <numero>aeiou</numero>  <cardholder>aeiou</cardholder>  <fechaVencimiento>aeiou</fechaVencimiento></TarjetaDTO>");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
